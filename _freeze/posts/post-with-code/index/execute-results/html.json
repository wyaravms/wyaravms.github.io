{
  "hash": "baa7bbc1adc3055c08993c6ed8eeed82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Newton-Raphson's method for Weibull distribution\"\nauthor: \"Wyara Moura\"\nformat: \n  html:\n    code-fold: true\n    fig-width: 7\n    fig-height: 5\ndate: \"2023-02-25\"\ncategories: [R, code, analysis]\ntitle-block-banner: true\n---\n\n\nLet $X_{i} \\sim \\mbox{Weibull}(\\alpha, \\beta)$ then,\n\n\n```{=tex}\n\\begin{equation*}\nf(x_{i}|\\alpha, \\beta) = \\dfrac{\\alpha}{\\beta}\\left(\\dfrac{x_{i}}{\\beta}\\right)^{\\alpha -1}\\exp\\left\\{-\\left(\\dfrac{x_{i}}{\\beta}\\right)^{\\alpha}\\right\\}, \\hspace{0.5cm} \\mbox{para} \\hspace{0.5cm} x_{i}\\geq 0.\n\\end{equation*}\n```\n\nIn this continuous distribution we have that $\\alpha>0$ is the shape parameter and $\\beta>0$ is the scale parameter.\n\nSuposse that $X_{1}, \\cdots, X_{n}$ be a random sample with Weibull distribution $(\\alpha,1)$\n\nObtain the maximum likelihood estimate using the Newton-Raphson's method for the alpha parameter for the Weibull distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nset.seed(25)\n\ndados <- read_table(\"Dados_Weibull.txt\", col_names = FALSE)\n\nggplot(dados, aes(x = X1)) +\n  geom_histogram(aes(y = after_stat(density)), \n                 bins = 30, \n                 color = \"black\", \n                 fill = \"grey\"\n  ) +\n  geom_density(alpha = 0.2, \n               linetype = 2, \n               fill = \"light blue\"\n  ) +\n  labs(x = \"Data\", y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnewton.raphson.w <- function(x.dados, alpha.0 = 10, precisao = 1e-7, n = 100) {\n  dlogLikW <- function(y) {\n    (length(x.dados) / y) + sum(log(x.dados)) - sum(log(x.dados) * (x.dados^y))\n  }\n  \n  ddlogLikW <- function(z) {\n    -(length(x.dados) / z^2) - sum((log(x.dados)^2) * (x.dados^z))\n  }\n  \n  for (i in 1:n) {\n    alpha.1 <- alpha.0 - dlogLikW(alpha.0) / ddlogLikW(alpha.0)\n    \n    if (abs(alpha.1 - alpha.0) < precisao) {\n      res <- list(alpha.estimado = alpha.1, n.iter = i)\n      return(res)\n    }\n    \n    alpha.0 <- alpha.1\n  }\n  \n  print(\"with the number of iterations there was no convergence.\")\n}\n\ndados %>%\n  pull() %>%\n  newton.raphson.w()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$alpha.estimado\n[1] 4.965997\n\n$n.iter\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n#simulation\nn <- seq(10, 1000, 10)\n\nestimativas <- sapply(n, function(size) {\n  dat <- rweibull(size, shape = 5, scale = 1)\n  newton_result <- newton.raphson.w(dat, 2)\n  newton_result$alpha.estimado\n})\n\ndados <- tibble(\n  estim = estimativas,\n  sim = n\n)\n\nggplot(dados, aes(x = sim, y = estim)) + \n  geom_point(color = \"blue\") +\n  geom_line(y = 5, linetype = \"dashed\") +\n  labs(x = \"Sample size\", \n       y = expression(paste(\"Estimate for \", alpha))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\nTherefore, the estimated alpha for the data provided was $\\hat{\\alpha}=4.9659$. Moreover, we can observe that in the simulation part, the larger the sample, the algorithm will have the better performance.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}