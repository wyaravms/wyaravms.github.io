{
  "hash": "06ef12b596e33f77868adeb3cba92788",
  "result": {
    "markdown": "---\ntitle: \"Newton-Raphson's method for Weibull distribution\"\nauthor: \"Wyara Moura\"\nformat: \n  html:\n    code-fold: true\n    fig-width: 7\n    fig-height: 5\ndate: \"2023-02-25\"\ncategories: [R, code, analysis]\ntitle-block-banner: true\n---\n\n\nLet $X_{i} \\sim \\mbox{Weibull}(\\alpha, \\beta)$ then,\n\n\n```{=tex}\n\\begin{equation*}\nf(x_{i}|\\alpha, \\beta) = \\dfrac{\\alpha}{\\beta}\\left(\\dfrac{x_{i}}{\\beta}\\right)^{\\alpha -1}\\exp\\left\\{-\\left(\\dfrac{x_{i}}{\\beta}\\right)^{\\alpha}\\right\\}, \\hspace{0.5cm} \\mbox{para} \\hspace{0.5cm} x_{i}\\geq 0.\n\\end{equation*}\n```\n\nIn this continuous distribution we have that $\\alpha>0$ is the shape parameter and $\\beta>0$ is the scale parameter.\n\nSuposse that $X_{1}, \\cdots, X_{n}$ be a random sample with Weibull distribution $(\\alpha,1)$\n\nObtain the maximum likelihood estimate using the Newton-Raphson's method for the alpha parameter for the Weibull distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nset.seed(25)\n\ndados = read_table(\"Dados_Weibull.txt\", col_names = FALSE)\n\ndados %>%\nggplot(aes(X1)) +\n  geom_histogram(aes(y=after_stat(density)), bins = 30, color=\"black\", fill=\"grey\")+\n  geom_density(alpha=.2, linetype = 2, fill=\"light blue\") +\n  labs(x=\"Data\", y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnewton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){\n  dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}\n  ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}\n  for (i in 1:n) {\n    alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)\n    if(abs(alpha.1 - alpha.0) < precisao){\n      res = list(alpha.1,i)\n      names(res) = c(\"alpha.estimado\",\"n.iter\")\n      return(res)\n    }\n    alpha.0 = alpha.1\n  }\n  print(\"with the number of iterations there was no convergence\")\n}\n\n# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution\n# The function is applied to the data in the column \"dados\"\ndados %>%\n  pull() %>%\n  newton.raphson.w()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$alpha.estimado\n[1] 4.965997\n\n$n.iter\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#simulation\nn = seq(10,1000,10)\n\nestimativas = array(NA, dim=c(length(n),1))\n\nfor (i in 1:length(n)){\n  dat =  rweibull(n[i], shape=5, scale=1)\n  estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado\n}\n\ndados <- tibble(\n  estim = estimativas,\n  sim = n)\n\nggplot(dados, aes(x = n,\n                  y = estim, \n                  group=1)) + \ngeom_point(color=\"blue\") +\ngeom_line(y=5) +\nlabs(x=\"Sample size\", y=expression(\"Estimate for\"~alpha), colour = \"Sample size\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\nTherefore, the estimated alpha for the data provided was $\\hat{\\alpha}=4.9659$. Moreover, we can observe that in the simulation part, the larger the sample, the algorithm will have the better performance.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}