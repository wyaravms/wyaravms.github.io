as.data.frame(estimat)
estimat <- cbind(estimat,rownames(estimat))
rownames(estimat) <- NULL
estimat
data.frame(t(estimat))
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
data_estim = data.frame(t(estimat))
dados = data.frame(t(estimat))
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dados
ggplot(dados$alpha.estimado,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dados$alpha.estimado
dados$alpha.estimado
dados %>%
tibble::rownames_to_column() %>%
ggplot(dados$alpha.estimado,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
dados = data.frame(t(estimat))
dados
dados <- tibble(
estim = alpha.estimado,
sim = n.iter)
dados$alpha.estimado
dados[1,]
dados[,1]
dados
dados <- tibble(
estim = dados$alpha.estimado,
sim = dados$n.iter)
dados
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
dados = data.frame(estimat)
dados
dados$X1
dados$X1[1]
newton.raphson.w(dados %>% .$X1)
dados = read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados %>% .$X1)
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
estimat
dados = data.frame(t(estimat))
dados
dados <- tibble(dados)
dados
tibble(dados)
dados
dados = data.frame(t(estimat))
dados
dados[1,]
dados[2,]
data.frame(dados)
dados = data.frame(dados)
dados[1,]
dados[,1]
transpose_tibble(dados)
#simulation
n = seq(10,1200,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(22)
library(tidyverse)
dados = read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados %>% .$X1)
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados = tibble(
estim = estimativas,
sim = n)
#| warning: false
library(tidyverse)
#| warning: false
library(tidyverse)
library(tibble)
dados = readr::read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimated","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados$X1)
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dat =  rweibull(n[1], shape=5, scale=1)
estimativas[1,] = newton.raphson.w(dat,2)$alpha.estimado
dat
newton.raphson.w(dat,2)$alpha.estimado
newton.raphson.w
newton.raphson.w(dat,2)$alpha.estimado
dat
newton.raphson.w(dat,2)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE)
mi_counties <- map_data("world") %>%
select(lon = long, lat, group, id = subregion)
mi_counties <- map_data("county", "california") %>%
select(lon = long, lat, group, id = subregion)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE)
sst = read.csv("C:\\Users\\Wyara Silva\\Google Drive\\phd-ucsc\\spring-2018\\ams-207\\take-home-3\\data\\sst.csv")
sst = read.csv("C:\\Users\\Wyara Silva\\Meu Drive\\phd-ucsc\\spring-2018\\ams-207\\take-home-3\\data\\sst.csv")
attach(sst)
Type = factor(Type)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_sf_label(aes(label = NAME))
?ne_countries
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_sf_label(aes(label = country))
library("maps")
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
head(states)
?st_as_sf
library(rnaturalearthdata)
library(sf)
library(tidyverse)
world <- ne_countries(scale = "medium", returnclass = "sf")
# Plotting map:
ggplot(data = world) +
geom_sf() +
# choose colour: geom_sf(color = "black", fill = "lightgreen")
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$name)), " countries)"))
# Zoom in on MENA area, retaining all the data in the "world" df. Coordinates
# from https://www.mapsofworld.com
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-18.0, 72.0), ylim = c(11.5, 45.0), expand = FALSE) +
xlab("lengdegrader") + ylab("breddegrader") +
ggtitle("Midtøsten og Nord-Afrika")
# Switching off  spherical geometry  because of updates in sf, see link:
# https://github.com/r-spatial/sf/issues/1902
sf_use_s2(FALSE)
world <- st_make_valid(world)
world_points <- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
# This is the custom-made map that I want to rid of irrelevant country names
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = TRUE) +
annotate(geom = "text", x = 20, y = 35, label = "MØNA",
fontface = "italic", color = "grey22", size = 6) +
coord_sf(xlim = c(-18.0, 72.0), ylim = c(11.5, 45.0), expand = FALSE) +
xlab("lengdegrader") + ylab("breddegrader") +
ggtitle("Midtøsten og Nord-Afrika") +
theme(panel.background = element_rect(fill = "aliceblue"))
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = TRUE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", fontface = "bold", check_overlap = TRUE)
?geom_text
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name), label.size =0.10,
color = "black", fontface = "bold", check_overlap = TRUE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name), label.size =0.10,
color = "black", check_overlap = TRUE)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name), label.size =0.10,
color = "black", check_overlap = TRUE, size=8)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=2)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=4)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(28, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3) +
labs(x=Longitude, y=Latitude)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3) +
labs(x=Longitude, y=Latitude)
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3) +
labs(x="Longitude", y="Latitude")
sst
ggplot(data = world) +
geom_sf() +
geom_point(data = sst, mapping = aes(x = lon, y = lat, colour = Type)) +
coord_sf(xlim = c(22, 37), ylim = c(27.5, 39), expand = FALSE) +
geom_text(data = world_points, aes(x=X, y=Y, label=name),
color = "black", check_overlap = TRUE, size=3.5) +
labs(x="Longitude", y="Latitude")
devtools::install_github("koenderks/aRtsy")
set.seed(2)
canvas_flame(colors = colorPalette("dark2"))
library(aRtsy)
install.packages("aRtsy")
library(aRtsy)
set.seed(2)
canvas_flame(colors = colorPalette("dark2"))
?canvas_flame
canvas_flame(
colors = colorPalette("origami"), variations = c(1, 2),
blend = FALSE, weighted = TRUE, iterations = 1e8
)
set.seed(123)
canvas_flame(colors = c("red", "blue"), iterations = 1e8, variations = c(10, 17))
?canvas_collatz
canvas_collatz(colors = colorPalette("tuscany3"))
canvas_collatz(colors = colorPalette("tuscany3"),angle.even = 0.0075, angle.odd = 0.0145)
?canvas_flame
canvas_flame(
colors = colorPalette("origami"), variations = 15,
blend = FALSE, weighted = TRUE, iterations = 1e8
)
canvas_flame(
colors = colorPalette("origami"), variations = 15,
blend = FALSE, weighted = TRUE, iterations = 1e3
)
canvas_flame(
colors = colorPalette("origami"), variations = 15,
blend = FALSE, weighted = TRUE, iterations = 1e3
)
canvas_flame(
colors = colorPalette("origami"), variations = 15,
blend = FALSE, weighted = TRUE, iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = 15,
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = 10,
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = 9,
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = 4,
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = c(1,15),
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = c(2,9,15),
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = c(9,15),
iterations = 1e5
)
canvas_flame(
colors = colorPalette("origami"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = colorPalette("dodgerblue"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = colorPalette("blue"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = color("dodgerblue"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = colors("dodgerblue"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = c("dodgerblue", "green"), variations = c(9,15),
iterations = 1e5, symmetry = -1
)
canvas_flame(
colors = c("orange", "red"), variations = c(9,15),
symmetry = -1
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,15),
symmetry = -1
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
symmetry = -1
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
symmetry = 1
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
symmetry = 0
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
symmetry = -1
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
variations = 0, symmetry = -1, iterations = 1e7
)
canvas_flame(
colors = c("orange", "red"), variations = c(2,9),
symmetry = -1, iterations = 1e7
)
