labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(12)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(14)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(15)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(16)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(20)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(21)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(22)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(24)
library(tidyverse)
dados = read_table("posts/post-with-code/Dados_Weibull.txt", col_names = FALSE)
dados %>%
ggplot(aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
# This code uses the newton.raphson.w() function to estimate the parameters of the Weibull distribution
# The function is applied to the data in the column "dados"
dados %>%
pull() %>%
newton.raphson.w()
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(1, length(n)))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[,i] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados, aes(x = n,
y = estim,
group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Sample size", y=expression("Estimate for"~alpha), colour = "Sample size")
14/3
16/2
-5 + 1/(1:5)
-5 + 1/(1:10)
((m+1)^2)/2
m=1:10
((m+1)^2)/2
2 + 2/(1:10)
-5 + 1/(1:1000)
2/3 - 1/2
2/3 - 3/4
(m-1)/m
m=(1:10)
m=(1:10)
(m-1)/m
m/(m+1)
1/(1:20)
5-(1/(1:10))
5+(1/(1:10))
3-(1/(1:10))
8-(1/(1:10))
8+(1/(1:10))
8+(1/(100:10000))
-1/(1:20)
1-1/(1:20)
(-1/(1:20) )- ( 1-1/(1:20))
(0.4^3) + (0.8^3 - 0.6^3)
0.8^3 - 0.6^3
0.4^3
(0.2^3) + (0.8^3 - 0.6^3)
0.4/2
0.8/2
0.6/2
1/4 + 3/8
15/32
8*4
(1/4) + (3/8)
15/32
8+7
4<8
4*0.2<8*0.2
(4*0.2)<(8*0.2)
(4*0.6)<(8*0.6)
-(4*0.6)<-(8*0.6)
(-4*0.6)<(-8*0.6)
qt
?qt
qt(0.9,1)
1-qt(n,1)
n=(10,100)
n=seq(10,100)
n
1-qt(n,1)
qt(n,1)
rt(10,1)
qt(2,1)
qt(0.1,1)
qt(0.1,1, lower.tail = FALSE)
x_qcauchy <- seq(0, 1, by = 0.02)
x_qcauchy
tt <- seq(0, 10, length.out = 21)
ncp <- seq(0, 6, length.out = 31)
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
t.tit <- "Non-central t - Probabilities"
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,
xlab = "t", ylab = "non-centrality parameter",
zlab = "Pr(T <= t)")
pt(n,1)
n
n*pt(n,1)
n*pnormal(n,1)
n*pnorm(n,1)
n*pnorm(n)
pnorm(n)
n=seq(100,1000,100)
n*pnorm(n)
n*pnorm(n,lower.tail = FALSE)
n*pt(n,1, lower.tail = FALSE)
n
n*ppois(n,lower.tail = FALSE)
n*ppois(n,2,lower.tail = FALSE)
n=seq(1,10,1)
n
n/(n+1)
library(MASS)
solve()
