ggplot(dados,
aes(x = sim,
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_line(stat = "identity", width=0.45)+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dados = readr::read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
rweibull(seq(10,50,10), shape=5, scale=1)
rweibull(seq(10,1000,10), shape=5, scale=1)
seq(10,50,10)
rweibull()
?rweibull
dados <- tibble(
estim = estimativas,
sim = c("10","30","100","1000"))
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
library(tidyverse)
dados = readr::read_table("Dados_Weibull.txt", col_names = FALSE)
setwd("C:/Users/Wyara Silva/Documents/wyaravms.github.io/posts/post-with-code")
dados = read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados %>% .$X1)
#simulation
n = c(10,30,100,1000)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = c("10","30","100","1000"))
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_lines(stat = "identity", width=0.45)+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_line(stat = "identity", width=0.45)+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_line()+
labs(x="simulation")
?geom_line
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=sim)) +
geom_line()+
labs(x="simulation")
ggplot(dados,
y = estim, group=sim) +
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=sim)) +
geom_line()+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=sim)) +
geom_line()+
labs(x="simulation")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_point() +
geom_line()
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1)) +
geom_point() +
geom_line()
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1)) +
geom_point() +
geom_line() +
labs(xlab="Number of simulations", ylab="Estimative for")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1)) +
geom_point() +
geom_line() +
labs(xlab="Number of simulations", ylab="Estimative for")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1)) +
geom_point() +
geom_line() +
labs(x="Number of simulations", y="Estimative for")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =sim)) +
geom_point() +
geom_line() +
labs(x="Number of simulations", y="Estimative for")
aes(x = fct_relevel(sim, c("10","30","100","1000")),
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Number of simulations", y="Estimative for")
ggplot(dados,
mi_counties <- map_data("county", "california") %>%
select(lon = long, lat, group, id = subregion)
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Number of simulations", y="Estimative for")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Number of simulations", y="Estimative for", colour = "Sample size")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Simulations", y=expression("Estimative for"~(alpha)), colour = "Sample size")
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim, group=1, colour =fct_relevel(sim, c("10","30","100","1000")))) +
geom_point() +
geom_line() +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
estimativas
dados <- tibble(
estim = estimativas,
sim = n)
dados
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point() +
geom_line() +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point() +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point() +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="lightblue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
scale_colour_gradient(low = "white", high = "black") +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
scale_colour_gradient(low = "white", high = "black") +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
?lapply
#simulation
n = seq(10,1500,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1200,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
sapply(n, newton.raphson.w)
n
sapply(n, rweibull, shape=5, scale=1)
n
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
estimat
estimat[,1]
estimat[,1]$alpha.estimado
estimat$alpha.estimado
as.tibble(estimat)
estimat[,1]
as.data.frame(estimat)
estimat <- cbind(estimat,rownames(estimat))
rownames(estimat) <- NULL
estimat
data.frame(t(estimat))
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
data_estim = data.frame(t(estimat))
dados = data.frame(t(estimat))
ggplot(dados,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dados
ggplot(dados$alpha.estimado,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dados$alpha.estimado
dados$alpha.estimado
dados %>%
tibble::rownames_to_column() %>%
ggplot(dados$alpha.estimado,
aes(x = fct_relevel(sim, c("10","30","100","1000")),
y = estim)) +
geom_bar(stat = "identity", width=0.45)+
labs(x="simulation")
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
dados = data.frame(t(estimat))
dados
dados <- tibble(
estim = alpha.estimado,
sim = n.iter)
dados$alpha.estimado
dados[1,]
dados[,1]
dados
dados <- tibble(
estim = dados$alpha.estimado,
sim = dados$n.iter)
dados
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
dados = data.frame(estimat)
dados
dados$X1
dados$X1[1]
newton.raphson.w(dados %>% .$X1)
dados = read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados %>% .$X1)
dat = sapply(n, rweibull, shape=5, scale=1)
estimat = sapply(dat, newton.raphson.w, alpha.0=2)
estimat
dados = data.frame(t(estimat))
dados
dados <- tibble(dados)
dados
tibble(dados)
dados
dados = data.frame(t(estimat))
dados
dados[1,]
dados[2,]
data.frame(dados)
dados = data.frame(dados)
dados[1,]
dados[,1]
transpose_tibble(dados)
#simulation
n = seq(10,1200,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
rm(list=ls(all=TRUE))
set.seed(22)
library(tidyverse)
dados = read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimado","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados %>% .$X1)
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados <- tibble(
estim = estimativas,
sim = n)
ggplot(dados,
aes(x = n,
y = estim, group=1)) +
geom_point(color="blue") +
geom_line(y=5) +
labs(x="Simulations", y=expression("Estimative for"~alpha), colour = "Sample size")
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
estimativas
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dados = tibble(
estim = estimativas,
sim = n)
#| warning: false
library(tidyverse)
#| warning: false
library(tidyverse)
library(tibble)
dados = readr::read_table("Dados_Weibull.txt", col_names = FALSE)
ggplot(dados, aes(X1)) +
geom_histogram(aes(y=after_stat(density)), bins = 30, color="black", fill="grey")+
geom_density(alpha=.2, linetype = 2, fill="light blue") +
labs(x="Data", y = "Density")
newton.raphson.w = function(x.dados, alpha.0=10, precisao = 1e-7, n=100){
dlogLikW = function(y){(length(x.dados)/y) + sum(log(x.dados)) - sum(log(x.dados)*(x.dados^y))}
ddlogLikW = function(z){-(length(x.dados)/z^2) - sum((log(x.dados)^2)*(x.dados^z))}
for (i in 1:n) {
alpha.1 = alpha.0 - dlogLikW(alpha.0)/ddlogLikW(alpha.0)
if(abs(alpha.1 - alpha.0) < precisao){
res = list(alpha.1,i)
names(res) = c("alpha.estimated","n.iter")
return(res)
}
alpha.0 = alpha.1
}
print("with the number of iterations there was no convergence")
}
newton.raphson.w(dados$X1)
#simulation
n = seq(10,1000,10)
estimativas = array(NA, dim=c(length(n),1))
for (i in 1:length(n)){
dat =  rweibull(n[i], shape=5, scale=1)
estimativas[i,] = newton.raphson.w(dat,2)$alpha.estimado
}
dat =  rweibull(n[1], shape=5, scale=1)
estimativas[1,] = newton.raphson.w(dat,2)$alpha.estimado
dat
newton.raphson.w(dat,2)$alpha.estimado
newton.raphson.w
newton.raphson.w(dat,2)$alpha.estimado
dat
newton.raphson.w(dat,2)
